// Code generated by Prisma (prisma@1.32.2). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  customer: (where?: CustomerWhereInput) => Promise<boolean>;
  role: (where?: RoleWhereInput) => Promise<boolean>;
  securityQuestion: (where?: SecurityQuestionWhereInput) => Promise<boolean>;
  securityQuestionAnswer: (
    where?: SecurityQuestionAnswerWhereInput
  ) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
  userAccount: (where?: UserAccountWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  customer: (where: CustomerWhereUniqueInput) => CustomerNullablePromise;
  customers: (args?: {
    where?: CustomerWhereInput;
    orderBy?: CustomerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Customer>;
  customersConnection: (args?: {
    where?: CustomerWhereInput;
    orderBy?: CustomerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CustomerConnectionPromise;
  role: (where: RoleWhereUniqueInput) => RoleNullablePromise;
  roles: (args?: {
    where?: RoleWhereInput;
    orderBy?: RoleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Role>;
  rolesConnection: (args?: {
    where?: RoleWhereInput;
    orderBy?: RoleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => RoleConnectionPromise;
  securityQuestion: (
    where: SecurityQuestionWhereUniqueInput
  ) => SecurityQuestionNullablePromise;
  securityQuestions: (args?: {
    where?: SecurityQuestionWhereInput;
    orderBy?: SecurityQuestionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<SecurityQuestion>;
  securityQuestionsConnection: (args?: {
    where?: SecurityQuestionWhereInput;
    orderBy?: SecurityQuestionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SecurityQuestionConnectionPromise;
  securityQuestionAnswer: (
    where: SecurityQuestionAnswerWhereUniqueInput
  ) => SecurityQuestionAnswerNullablePromise;
  securityQuestionAnswers: (args?: {
    where?: SecurityQuestionAnswerWhereInput;
    orderBy?: SecurityQuestionAnswerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<SecurityQuestionAnswer>;
  securityQuestionAnswersConnection: (args?: {
    where?: SecurityQuestionAnswerWhereInput;
    orderBy?: SecurityQuestionAnswerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SecurityQuestionAnswerConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  userAccount: (
    where: UserAccountWhereUniqueInput
  ) => UserAccountNullablePromise;
  userAccounts: (args?: {
    where?: UserAccountWhereInput;
    orderBy?: UserAccountOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<UserAccount>;
  userAccountsConnection: (args?: {
    where?: UserAccountWhereInput;
    orderBy?: UserAccountOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserAccountConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createCustomer: (data: CustomerCreateInput) => CustomerPromise;
  updateCustomer: (args: {
    data: CustomerUpdateInput;
    where: CustomerWhereUniqueInput;
  }) => CustomerPromise;
  updateManyCustomers: (args: {
    data: CustomerUpdateManyMutationInput;
    where?: CustomerWhereInput;
  }) => BatchPayloadPromise;
  upsertCustomer: (args: {
    where: CustomerWhereUniqueInput;
    create: CustomerCreateInput;
    update: CustomerUpdateInput;
  }) => CustomerPromise;
  deleteCustomer: (where: CustomerWhereUniqueInput) => CustomerPromise;
  deleteManyCustomers: (where?: CustomerWhereInput) => BatchPayloadPromise;
  createRole: (data: RoleCreateInput) => RolePromise;
  updateRole: (args: {
    data: RoleUpdateInput;
    where: RoleWhereUniqueInput;
  }) => RolePromise;
  updateManyRoles: (args: {
    data: RoleUpdateManyMutationInput;
    where?: RoleWhereInput;
  }) => BatchPayloadPromise;
  upsertRole: (args: {
    where: RoleWhereUniqueInput;
    create: RoleCreateInput;
    update: RoleUpdateInput;
  }) => RolePromise;
  deleteRole: (where: RoleWhereUniqueInput) => RolePromise;
  deleteManyRoles: (where?: RoleWhereInput) => BatchPayloadPromise;
  createSecurityQuestion: (
    data: SecurityQuestionCreateInput
  ) => SecurityQuestionPromise;
  updateSecurityQuestion: (args: {
    data: SecurityQuestionUpdateInput;
    where: SecurityQuestionWhereUniqueInput;
  }) => SecurityQuestionPromise;
  updateManySecurityQuestions: (args: {
    data: SecurityQuestionUpdateManyMutationInput;
    where?: SecurityQuestionWhereInput;
  }) => BatchPayloadPromise;
  upsertSecurityQuestion: (args: {
    where: SecurityQuestionWhereUniqueInput;
    create: SecurityQuestionCreateInput;
    update: SecurityQuestionUpdateInput;
  }) => SecurityQuestionPromise;
  deleteSecurityQuestion: (
    where: SecurityQuestionWhereUniqueInput
  ) => SecurityQuestionPromise;
  deleteManySecurityQuestions: (
    where?: SecurityQuestionWhereInput
  ) => BatchPayloadPromise;
  createSecurityQuestionAnswer: (
    data: SecurityQuestionAnswerCreateInput
  ) => SecurityQuestionAnswerPromise;
  updateSecurityQuestionAnswer: (args: {
    data: SecurityQuestionAnswerUpdateInput;
    where: SecurityQuestionAnswerWhereUniqueInput;
  }) => SecurityQuestionAnswerPromise;
  updateManySecurityQuestionAnswers: (args: {
    data: SecurityQuestionAnswerUpdateManyMutationInput;
    where?: SecurityQuestionAnswerWhereInput;
  }) => BatchPayloadPromise;
  upsertSecurityQuestionAnswer: (args: {
    where: SecurityQuestionAnswerWhereUniqueInput;
    create: SecurityQuestionAnswerCreateInput;
    update: SecurityQuestionAnswerUpdateInput;
  }) => SecurityQuestionAnswerPromise;
  deleteSecurityQuestionAnswer: (
    where: SecurityQuestionAnswerWhereUniqueInput
  ) => SecurityQuestionAnswerPromise;
  deleteManySecurityQuestionAnswers: (
    where?: SecurityQuestionAnswerWhereInput
  ) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;
  createUserAccount: (data: UserAccountCreateInput) => UserAccountPromise;
  updateUserAccount: (args: {
    data: UserAccountUpdateInput;
    where: UserAccountWhereUniqueInput;
  }) => UserAccountPromise;
  updateManyUserAccounts: (args: {
    data: UserAccountUpdateManyMutationInput;
    where?: UserAccountWhereInput;
  }) => BatchPayloadPromise;
  upsertUserAccount: (args: {
    where: UserAccountWhereUniqueInput;
    create: UserAccountCreateInput;
    update: UserAccountUpdateInput;
  }) => UserAccountPromise;
  deleteUserAccount: (where: UserAccountWhereUniqueInput) => UserAccountPromise;
  deleteManyUserAccounts: (
    where?: UserAccountWhereInput
  ) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  customer: (
    where?: CustomerSubscriptionWhereInput
  ) => CustomerSubscriptionPayloadSubscription;
  role: (
    where?: RoleSubscriptionWhereInput
  ) => RoleSubscriptionPayloadSubscription;
  securityQuestion: (
    where?: SecurityQuestionSubscriptionWhereInput
  ) => SecurityQuestionSubscriptionPayloadSubscription;
  securityQuestionAnswer: (
    where?: SecurityQuestionAnswerSubscriptionWhereInput
  ) => SecurityQuestionAnswerSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
  userAccount: (
    where?: UserAccountSubscriptionWhereInput
  ) => UserAccountSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type SecurityQuestionAnswerOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "answer_ASC"
  | "answer_DESC";

export type CustomerOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "stripeId_ASC"
  | "stripeId_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "deletedAt_ASC"
  | "deletedAt_DESC";

export type RoleOrderByInput = "id_ASC" | "id_DESC" | "name_ASC" | "name_DESC";

export type RoleName = "USER";

export type SecurityQuestionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "shortName_ASC"
  | "shortName_DESC"
  | "question_ASC"
  | "question_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "firstName_ASC"
  | "firstName_DESC"
  | "lastName_ASC"
  | "lastName_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "phoneCountryCode_ASC"
  | "phoneCountryCode_DESC"
  | "phone_ASC"
  | "phone_DESC"
  | "country_ASC"
  | "country_DESC"
  | "address1_ASC"
  | "address1_DESC"
  | "address2_ASC"
  | "address2_DESC"
  | "city_ASC"
  | "city_DESC"
  | "state_ASC"
  | "state_DESC"
  | "postalCode_ASC"
  | "postalCode_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "deletedAt_ASC"
  | "deletedAt_DESC";

export type UserAccountOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "confirmed_ASC"
  | "confirmed_DESC"
  | "confirmedCode_ASC"
  | "confirmedCode_DESC"
  | "confirmedExpires_ASC"
  | "confirmedExpires_DESC"
  | "locked_ASC"
  | "locked_DESC"
  | "lockedCode_ASC"
  | "lockedCode_DESC"
  | "lockedExpires_ASC"
  | "lockedExpires_DESC"
  | "resetPasswordCode_ASC"
  | "resetPasswordCode_DESC"
  | "resetPasswordExpires_ASC"
  | "resetPasswordExpires_DESC"
  | "loginAttempts_ASC"
  | "loginAttempts_DESC"
  | "securityQuestionAttempts_ASC"
  | "securityQuestionAttempts_DESC"
  | "lastVisit_ASC"
  | "lastVisit_DESC"
  | "ip_ASC"
  | "ip_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "deletedAt_ASC"
  | "deletedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface RoleUpdateDataInput {
  name?: Maybe<RoleName>;
}

export type CustomerWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  stripeId?: Maybe<String>;
}>;

export interface SecurityQuestionAnswerUpdateWithWhereUniqueWithoutUserAccountInput {
  where: SecurityQuestionAnswerWhereUniqueInput;
  data: SecurityQuestionAnswerUpdateWithoutUserAccountDataInput;
}

export interface SecurityQuestionAnswerWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  userAccount?: Maybe<UserAccountWhereInput>;
  userSecurityQuestion?: Maybe<SecurityQuestionWhereInput>;
  answer?: Maybe<String>;
  answer_not?: Maybe<String>;
  answer_in?: Maybe<String[] | String>;
  answer_not_in?: Maybe<String[] | String>;
  answer_lt?: Maybe<String>;
  answer_lte?: Maybe<String>;
  answer_gt?: Maybe<String>;
  answer_gte?: Maybe<String>;
  answer_contains?: Maybe<String>;
  answer_not_contains?: Maybe<String>;
  answer_starts_with?: Maybe<String>;
  answer_not_starts_with?: Maybe<String>;
  answer_ends_with?: Maybe<String>;
  answer_not_ends_with?: Maybe<String>;
  AND?: Maybe<
    SecurityQuestionAnswerWhereInput[] | SecurityQuestionAnswerWhereInput
  >;
  OR?: Maybe<
    SecurityQuestionAnswerWhereInput[] | SecurityQuestionAnswerWhereInput
  >;
  NOT?: Maybe<
    SecurityQuestionAnswerWhereInput[] | SecurityQuestionAnswerWhereInput
  >;
}

export interface SecurityQuestionAnswerUpdateWithoutUserAccountDataInput {
  userSecurityQuestion?: Maybe<SecurityQuestionUpdateOneRequiredInput>;
  answer?: Maybe<String>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  role?: Maybe<RoleWhereInput>;
  userAccount?: Maybe<UserAccountWhereInput>;
  customerAccount?: Maybe<CustomerWhereInput>;
  firstName?: Maybe<String>;
  firstName_not?: Maybe<String>;
  firstName_in?: Maybe<String[] | String>;
  firstName_not_in?: Maybe<String[] | String>;
  firstName_lt?: Maybe<String>;
  firstName_lte?: Maybe<String>;
  firstName_gt?: Maybe<String>;
  firstName_gte?: Maybe<String>;
  firstName_contains?: Maybe<String>;
  firstName_not_contains?: Maybe<String>;
  firstName_starts_with?: Maybe<String>;
  firstName_not_starts_with?: Maybe<String>;
  firstName_ends_with?: Maybe<String>;
  firstName_not_ends_with?: Maybe<String>;
  lastName?: Maybe<String>;
  lastName_not?: Maybe<String>;
  lastName_in?: Maybe<String[] | String>;
  lastName_not_in?: Maybe<String[] | String>;
  lastName_lt?: Maybe<String>;
  lastName_lte?: Maybe<String>;
  lastName_gt?: Maybe<String>;
  lastName_gte?: Maybe<String>;
  lastName_contains?: Maybe<String>;
  lastName_not_contains?: Maybe<String>;
  lastName_starts_with?: Maybe<String>;
  lastName_not_starts_with?: Maybe<String>;
  lastName_ends_with?: Maybe<String>;
  lastName_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  phoneCountryCode?: Maybe<String>;
  phoneCountryCode_not?: Maybe<String>;
  phoneCountryCode_in?: Maybe<String[] | String>;
  phoneCountryCode_not_in?: Maybe<String[] | String>;
  phoneCountryCode_lt?: Maybe<String>;
  phoneCountryCode_lte?: Maybe<String>;
  phoneCountryCode_gt?: Maybe<String>;
  phoneCountryCode_gte?: Maybe<String>;
  phoneCountryCode_contains?: Maybe<String>;
  phoneCountryCode_not_contains?: Maybe<String>;
  phoneCountryCode_starts_with?: Maybe<String>;
  phoneCountryCode_not_starts_with?: Maybe<String>;
  phoneCountryCode_ends_with?: Maybe<String>;
  phoneCountryCode_not_ends_with?: Maybe<String>;
  phone?: Maybe<String>;
  phone_not?: Maybe<String>;
  phone_in?: Maybe<String[] | String>;
  phone_not_in?: Maybe<String[] | String>;
  phone_lt?: Maybe<String>;
  phone_lte?: Maybe<String>;
  phone_gt?: Maybe<String>;
  phone_gte?: Maybe<String>;
  phone_contains?: Maybe<String>;
  phone_not_contains?: Maybe<String>;
  phone_starts_with?: Maybe<String>;
  phone_not_starts_with?: Maybe<String>;
  phone_ends_with?: Maybe<String>;
  phone_not_ends_with?: Maybe<String>;
  country?: Maybe<String>;
  country_not?: Maybe<String>;
  country_in?: Maybe<String[] | String>;
  country_not_in?: Maybe<String[] | String>;
  country_lt?: Maybe<String>;
  country_lte?: Maybe<String>;
  country_gt?: Maybe<String>;
  country_gte?: Maybe<String>;
  country_contains?: Maybe<String>;
  country_not_contains?: Maybe<String>;
  country_starts_with?: Maybe<String>;
  country_not_starts_with?: Maybe<String>;
  country_ends_with?: Maybe<String>;
  country_not_ends_with?: Maybe<String>;
  address1?: Maybe<String>;
  address1_not?: Maybe<String>;
  address1_in?: Maybe<String[] | String>;
  address1_not_in?: Maybe<String[] | String>;
  address1_lt?: Maybe<String>;
  address1_lte?: Maybe<String>;
  address1_gt?: Maybe<String>;
  address1_gte?: Maybe<String>;
  address1_contains?: Maybe<String>;
  address1_not_contains?: Maybe<String>;
  address1_starts_with?: Maybe<String>;
  address1_not_starts_with?: Maybe<String>;
  address1_ends_with?: Maybe<String>;
  address1_not_ends_with?: Maybe<String>;
  address2?: Maybe<String>;
  address2_not?: Maybe<String>;
  address2_in?: Maybe<String[] | String>;
  address2_not_in?: Maybe<String[] | String>;
  address2_lt?: Maybe<String>;
  address2_lte?: Maybe<String>;
  address2_gt?: Maybe<String>;
  address2_gte?: Maybe<String>;
  address2_contains?: Maybe<String>;
  address2_not_contains?: Maybe<String>;
  address2_starts_with?: Maybe<String>;
  address2_not_starts_with?: Maybe<String>;
  address2_ends_with?: Maybe<String>;
  address2_not_ends_with?: Maybe<String>;
  city?: Maybe<String>;
  city_not?: Maybe<String>;
  city_in?: Maybe<String[] | String>;
  city_not_in?: Maybe<String[] | String>;
  city_lt?: Maybe<String>;
  city_lte?: Maybe<String>;
  city_gt?: Maybe<String>;
  city_gte?: Maybe<String>;
  city_contains?: Maybe<String>;
  city_not_contains?: Maybe<String>;
  city_starts_with?: Maybe<String>;
  city_not_starts_with?: Maybe<String>;
  city_ends_with?: Maybe<String>;
  city_not_ends_with?: Maybe<String>;
  state?: Maybe<String>;
  state_not?: Maybe<String>;
  state_in?: Maybe<String[] | String>;
  state_not_in?: Maybe<String[] | String>;
  state_lt?: Maybe<String>;
  state_lte?: Maybe<String>;
  state_gt?: Maybe<String>;
  state_gte?: Maybe<String>;
  state_contains?: Maybe<String>;
  state_not_contains?: Maybe<String>;
  state_starts_with?: Maybe<String>;
  state_not_starts_with?: Maybe<String>;
  state_ends_with?: Maybe<String>;
  state_not_ends_with?: Maybe<String>;
  postalCode?: Maybe<String>;
  postalCode_not?: Maybe<String>;
  postalCode_in?: Maybe<String[] | String>;
  postalCode_not_in?: Maybe<String[] | String>;
  postalCode_lt?: Maybe<String>;
  postalCode_lte?: Maybe<String>;
  postalCode_gt?: Maybe<String>;
  postalCode_gte?: Maybe<String>;
  postalCode_contains?: Maybe<String>;
  postalCode_not_contains?: Maybe<String>;
  postalCode_starts_with?: Maybe<String>;
  postalCode_not_starts_with?: Maybe<String>;
  postalCode_ends_with?: Maybe<String>;
  postalCode_not_ends_with?: Maybe<String>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  deletedAt?: Maybe<DateTimeInput>;
  deletedAt_not?: Maybe<DateTimeInput>;
  deletedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  deletedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  deletedAt_lt?: Maybe<DateTimeInput>;
  deletedAt_lte?: Maybe<DateTimeInput>;
  deletedAt_gt?: Maybe<DateTimeInput>;
  deletedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface SecurityQuestionUpdateOneRequiredInput {
  create?: Maybe<SecurityQuestionCreateInput>;
  update?: Maybe<SecurityQuestionUpdateDataInput>;
  upsert?: Maybe<SecurityQuestionUpsertNestedInput>;
  connect?: Maybe<SecurityQuestionWhereUniqueInput>;
}

export interface CustomerWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user?: Maybe<UserWhereInput>;
  stripeId?: Maybe<String>;
  stripeId_not?: Maybe<String>;
  stripeId_in?: Maybe<String[] | String>;
  stripeId_not_in?: Maybe<String[] | String>;
  stripeId_lt?: Maybe<String>;
  stripeId_lte?: Maybe<String>;
  stripeId_gt?: Maybe<String>;
  stripeId_gte?: Maybe<String>;
  stripeId_contains?: Maybe<String>;
  stripeId_not_contains?: Maybe<String>;
  stripeId_starts_with?: Maybe<String>;
  stripeId_not_starts_with?: Maybe<String>;
  stripeId_ends_with?: Maybe<String>;
  stripeId_not_ends_with?: Maybe<String>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  deletedAt?: Maybe<DateTimeInput>;
  deletedAt_not?: Maybe<DateTimeInput>;
  deletedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  deletedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  deletedAt_lt?: Maybe<DateTimeInput>;
  deletedAt_lte?: Maybe<DateTimeInput>;
  deletedAt_gt?: Maybe<DateTimeInput>;
  deletedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CustomerWhereInput[] | CustomerWhereInput>;
  OR?: Maybe<CustomerWhereInput[] | CustomerWhereInput>;
  NOT?: Maybe<CustomerWhereInput[] | CustomerWhereInput>;
}

export interface SecurityQuestionUpdateDataInput {
  shortName?: Maybe<String>;
  question?: Maybe<String>;
}

export interface SecurityQuestionWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  shortName?: Maybe<String>;
  shortName_not?: Maybe<String>;
  shortName_in?: Maybe<String[] | String>;
  shortName_not_in?: Maybe<String[] | String>;
  shortName_lt?: Maybe<String>;
  shortName_lte?: Maybe<String>;
  shortName_gt?: Maybe<String>;
  shortName_gte?: Maybe<String>;
  shortName_contains?: Maybe<String>;
  shortName_not_contains?: Maybe<String>;
  shortName_starts_with?: Maybe<String>;
  shortName_not_starts_with?: Maybe<String>;
  shortName_ends_with?: Maybe<String>;
  shortName_not_ends_with?: Maybe<String>;
  question?: Maybe<String>;
  question_not?: Maybe<String>;
  question_in?: Maybe<String[] | String>;
  question_not_in?: Maybe<String[] | String>;
  question_lt?: Maybe<String>;
  question_lte?: Maybe<String>;
  question_gt?: Maybe<String>;
  question_gte?: Maybe<String>;
  question_contains?: Maybe<String>;
  question_not_contains?: Maybe<String>;
  question_starts_with?: Maybe<String>;
  question_not_starts_with?: Maybe<String>;
  question_ends_with?: Maybe<String>;
  question_not_ends_with?: Maybe<String>;
  AND?: Maybe<SecurityQuestionWhereInput[] | SecurityQuestionWhereInput>;
  OR?: Maybe<SecurityQuestionWhereInput[] | SecurityQuestionWhereInput>;
  NOT?: Maybe<SecurityQuestionWhereInput[] | SecurityQuestionWhereInput>;
}

export interface RoleCreateOneInput {
  create?: Maybe<RoleCreateInput>;
  connect?: Maybe<RoleWhereUniqueInput>;
}

export interface SecurityQuestionUpdateManyMutationInput {
  shortName?: Maybe<String>;
  question?: Maybe<String>;
}

export interface RoleCreateInput {
  name: RoleName;
}

export interface SecurityQuestionUpsertNestedInput {
  update: SecurityQuestionUpdateDataInput;
  create: SecurityQuestionCreateInput;
}

export interface UserAccountCreateOneWithoutUserInput {
  create?: Maybe<UserAccountCreateWithoutUserInput>;
  connect?: Maybe<UserAccountWhereUniqueInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface UserAccountCreateWithoutUserInput {
  confirmed?: Maybe<Boolean>;
  confirmedCode?: Maybe<Int>;
  confirmedExpires?: Maybe<String>;
  locked?: Maybe<Boolean>;
  lockedCode?: Maybe<Int>;
  lockedExpires?: Maybe<String>;
  resetPasswordCode?: Maybe<Int>;
  resetPasswordExpires?: Maybe<String>;
  securityQuestions?: Maybe<
    SecurityQuestionAnswerCreateManyWithoutUserAccountInput
  >;
  loginAttempts?: Maybe<Int>;
  securityQuestionAttempts?: Maybe<Int>;
  lastVisit?: Maybe<DateTimeInput>;
  ip?: Maybe<String>;
  deletedAt?: Maybe<DateTimeInput>;
}

export interface SecurityQuestionSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<SecurityQuestionWhereInput>;
  AND?: Maybe<
    | SecurityQuestionSubscriptionWhereInput[]
    | SecurityQuestionSubscriptionWhereInput
  >;
  OR?: Maybe<
    | SecurityQuestionSubscriptionWhereInput[]
    | SecurityQuestionSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | SecurityQuestionSubscriptionWhereInput[]
    | SecurityQuestionSubscriptionWhereInput
  >;
}

export interface SecurityQuestionAnswerCreateManyWithoutUserAccountInput {
  create?: Maybe<
    | SecurityQuestionAnswerCreateWithoutUserAccountInput[]
    | SecurityQuestionAnswerCreateWithoutUserAccountInput
  >;
  connect?: Maybe<
    | SecurityQuestionAnswerWhereUniqueInput[]
    | SecurityQuestionAnswerWhereUniqueInput
  >;
}

export type RoleWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  name?: Maybe<RoleName>;
}>;

export interface SecurityQuestionAnswerCreateWithoutUserAccountInput {
  userSecurityQuestion: SecurityQuestionCreateOneInput;
  answer: String;
}

export interface UserAccountUpdateManyMutationInput {
  confirmed?: Maybe<Boolean>;
  confirmedCode?: Maybe<Int>;
  confirmedExpires?: Maybe<String>;
  locked?: Maybe<Boolean>;
  lockedCode?: Maybe<Int>;
  lockedExpires?: Maybe<String>;
  resetPasswordCode?: Maybe<Int>;
  resetPasswordExpires?: Maybe<String>;
  loginAttempts?: Maybe<Int>;
  securityQuestionAttempts?: Maybe<Int>;
  lastVisit?: Maybe<DateTimeInput>;
  ip?: Maybe<String>;
  deletedAt?: Maybe<DateTimeInput>;
}

export interface SecurityQuestionCreateOneInput {
  create?: Maybe<SecurityQuestionCreateInput>;
  connect?: Maybe<SecurityQuestionWhereUniqueInput>;
}

export interface UserAccountCreateInput {
  user: UserCreateOneWithoutUserAccountInput;
  confirmed?: Maybe<Boolean>;
  confirmedCode?: Maybe<Int>;
  confirmedExpires?: Maybe<String>;
  locked?: Maybe<Boolean>;
  lockedCode?: Maybe<Int>;
  lockedExpires?: Maybe<String>;
  resetPasswordCode?: Maybe<Int>;
  resetPasswordExpires?: Maybe<String>;
  securityQuestions?: Maybe<
    SecurityQuestionAnswerCreateManyWithoutUserAccountInput
  >;
  loginAttempts?: Maybe<Int>;
  securityQuestionAttempts?: Maybe<Int>;
  lastVisit?: Maybe<DateTimeInput>;
  ip?: Maybe<String>;
  deletedAt?: Maybe<DateTimeInput>;
}

export interface SecurityQuestionCreateInput {
  shortName: String;
  question: String;
}

export interface UserUpdateManyMutationInput {
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  phoneCountryCode?: Maybe<String>;
  phone?: Maybe<String>;
  country?: Maybe<String>;
  address1?: Maybe<String>;
  address2?: Maybe<String>;
  city?: Maybe<String>;
  state?: Maybe<String>;
  postalCode?: Maybe<String>;
  deletedAt?: Maybe<DateTimeInput>;
}

export interface CustomerUpdateInput {
  user?: Maybe<UserUpdateOneRequiredWithoutCustomerAccountInput>;
  stripeId?: Maybe<String>;
  deletedAt?: Maybe<DateTimeInput>;
}

export interface UserCreateInput {
  role: RoleCreateOneInput;
  userAccount: UserAccountCreateOneWithoutUserInput;
  customerAccount?: Maybe<CustomerCreateOneWithoutUserInput>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  email: String;
  password: String;
  phoneCountryCode?: Maybe<String>;
  phone?: Maybe<String>;
  country?: Maybe<String>;
  address1?: Maybe<String>;
  address2?: Maybe<String>;
  city?: Maybe<String>;
  state?: Maybe<String>;
  postalCode?: Maybe<String>;
  deletedAt?: Maybe<DateTimeInput>;
}

export interface UserUpdateOneRequiredWithoutCustomerAccountInput {
  create?: Maybe<UserCreateWithoutCustomerAccountInput>;
  update?: Maybe<UserUpdateWithoutCustomerAccountDataInput>;
  upsert?: Maybe<UserUpsertWithoutCustomerAccountInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export type SecurityQuestionAnswerWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface UserUpdateWithoutCustomerAccountDataInput {
  role?: Maybe<RoleUpdateOneRequiredInput>;
  userAccount?: Maybe<UserAccountUpdateOneRequiredWithoutUserInput>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  phoneCountryCode?: Maybe<String>;
  phone?: Maybe<String>;
  country?: Maybe<String>;
  address1?: Maybe<String>;
  address2?: Maybe<String>;
  city?: Maybe<String>;
  state?: Maybe<String>;
  postalCode?: Maybe<String>;
  deletedAt?: Maybe<DateTimeInput>;
}

export interface UserUpsertWithoutUserAccountInput {
  update: UserUpdateWithoutUserAccountDataInput;
  create: UserCreateWithoutUserAccountInput;
}

export interface RoleUpdateOneRequiredInput {
  create?: Maybe<RoleCreateInput>;
  update?: Maybe<RoleUpdateDataInput>;
  upsert?: Maybe<RoleUpsertNestedInput>;
  connect?: Maybe<RoleWhereUniqueInput>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface CustomerCreateOneWithoutUserInput {
  create?: Maybe<CustomerCreateWithoutUserInput>;
  connect?: Maybe<CustomerWhereUniqueInput>;
}

export interface CustomerUpdateOneWithoutUserInput {
  create?: Maybe<CustomerCreateWithoutUserInput>;
  update?: Maybe<CustomerUpdateWithoutUserDataInput>;
  upsert?: Maybe<CustomerUpsertWithoutUserInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<CustomerWhereUniqueInput>;
}

export interface RoleUpsertNestedInput {
  update: RoleUpdateDataInput;
  create: RoleCreateInput;
}

export interface UserUpdateOneRequiredWithoutUserAccountInput {
  create?: Maybe<UserCreateWithoutUserAccountInput>;
  update?: Maybe<UserUpdateWithoutUserAccountDataInput>;
  upsert?: Maybe<UserUpsertWithoutUserAccountInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserAccountUpdateOneRequiredWithoutUserInput {
  create?: Maybe<UserAccountCreateWithoutUserInput>;
  update?: Maybe<UserAccountUpdateWithoutUserDataInput>;
  upsert?: Maybe<UserAccountUpsertWithoutUserInput>;
  connect?: Maybe<UserAccountWhereUniqueInput>;
}

export interface UserAccountUpdateWithoutSecurityQuestionsDataInput {
  user?: Maybe<UserUpdateOneRequiredWithoutUserAccountInput>;
  confirmed?: Maybe<Boolean>;
  confirmedCode?: Maybe<Int>;
  confirmedExpires?: Maybe<String>;
  locked?: Maybe<Boolean>;
  lockedCode?: Maybe<Int>;
  lockedExpires?: Maybe<String>;
  resetPasswordCode?: Maybe<Int>;
  resetPasswordExpires?: Maybe<String>;
  loginAttempts?: Maybe<Int>;
  securityQuestionAttempts?: Maybe<Int>;
  lastVisit?: Maybe<DateTimeInput>;
  ip?: Maybe<String>;
  deletedAt?: Maybe<DateTimeInput>;
}

export interface UserAccountUpdateWithoutUserDataInput {
  confirmed?: Maybe<Boolean>;
  confirmedCode?: Maybe<Int>;
  confirmedExpires?: Maybe<String>;
  locked?: Maybe<Boolean>;
  lockedCode?: Maybe<Int>;
  lockedExpires?: Maybe<String>;
  resetPasswordCode?: Maybe<Int>;
  resetPasswordExpires?: Maybe<String>;
  securityQuestions?: Maybe<
    SecurityQuestionAnswerUpdateManyWithoutUserAccountInput
  >;
  loginAttempts?: Maybe<Int>;
  securityQuestionAttempts?: Maybe<Int>;
  lastVisit?: Maybe<DateTimeInput>;
  ip?: Maybe<String>;
  deletedAt?: Maybe<DateTimeInput>;
}

export interface SecurityQuestionAnswerUpdateInput {
  userAccount?: Maybe<
    UserAccountUpdateOneRequiredWithoutSecurityQuestionsInput
  >;
  userSecurityQuestion?: Maybe<SecurityQuestionUpdateOneRequiredInput>;
  answer?: Maybe<String>;
}

export interface SecurityQuestionAnswerUpdateManyWithoutUserAccountInput {
  create?: Maybe<
    | SecurityQuestionAnswerCreateWithoutUserAccountInput[]
    | SecurityQuestionAnswerCreateWithoutUserAccountInput
  >;
  delete?: Maybe<
    | SecurityQuestionAnswerWhereUniqueInput[]
    | SecurityQuestionAnswerWhereUniqueInput
  >;
  connect?: Maybe<
    | SecurityQuestionAnswerWhereUniqueInput[]
    | SecurityQuestionAnswerWhereUniqueInput
  >;
  set?: Maybe<
    | SecurityQuestionAnswerWhereUniqueInput[]
    | SecurityQuestionAnswerWhereUniqueInput
  >;
  disconnect?: Maybe<
    | SecurityQuestionAnswerWhereUniqueInput[]
    | SecurityQuestionAnswerWhereUniqueInput
  >;
  update?: Maybe<
    | SecurityQuestionAnswerUpdateWithWhereUniqueWithoutUserAccountInput[]
    | SecurityQuestionAnswerUpdateWithWhereUniqueWithoutUserAccountInput
  >;
  upsert?: Maybe<
    | SecurityQuestionAnswerUpsertWithWhereUniqueWithoutUserAccountInput[]
    | SecurityQuestionAnswerUpsertWithWhereUniqueWithoutUserAccountInput
  >;
  deleteMany?: Maybe<
    | SecurityQuestionAnswerScalarWhereInput[]
    | SecurityQuestionAnswerScalarWhereInput
  >;
  updateMany?: Maybe<
    | SecurityQuestionAnswerUpdateManyWithWhereNestedInput[]
    | SecurityQuestionAnswerUpdateManyWithWhereNestedInput
  >;
}

export interface UserCreateOneWithoutCustomerAccountInput {
  create?: Maybe<UserCreateWithoutCustomerAccountInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserAccountWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user?: Maybe<UserWhereInput>;
  confirmed?: Maybe<Boolean>;
  confirmed_not?: Maybe<Boolean>;
  confirmedCode?: Maybe<Int>;
  confirmedCode_not?: Maybe<Int>;
  confirmedCode_in?: Maybe<Int[] | Int>;
  confirmedCode_not_in?: Maybe<Int[] | Int>;
  confirmedCode_lt?: Maybe<Int>;
  confirmedCode_lte?: Maybe<Int>;
  confirmedCode_gt?: Maybe<Int>;
  confirmedCode_gte?: Maybe<Int>;
  confirmedExpires?: Maybe<String>;
  confirmedExpires_not?: Maybe<String>;
  confirmedExpires_in?: Maybe<String[] | String>;
  confirmedExpires_not_in?: Maybe<String[] | String>;
  confirmedExpires_lt?: Maybe<String>;
  confirmedExpires_lte?: Maybe<String>;
  confirmedExpires_gt?: Maybe<String>;
  confirmedExpires_gte?: Maybe<String>;
  confirmedExpires_contains?: Maybe<String>;
  confirmedExpires_not_contains?: Maybe<String>;
  confirmedExpires_starts_with?: Maybe<String>;
  confirmedExpires_not_starts_with?: Maybe<String>;
  confirmedExpires_ends_with?: Maybe<String>;
  confirmedExpires_not_ends_with?: Maybe<String>;
  locked?: Maybe<Boolean>;
  locked_not?: Maybe<Boolean>;
  lockedCode?: Maybe<Int>;
  lockedCode_not?: Maybe<Int>;
  lockedCode_in?: Maybe<Int[] | Int>;
  lockedCode_not_in?: Maybe<Int[] | Int>;
  lockedCode_lt?: Maybe<Int>;
  lockedCode_lte?: Maybe<Int>;
  lockedCode_gt?: Maybe<Int>;
  lockedCode_gte?: Maybe<Int>;
  lockedExpires?: Maybe<String>;
  lockedExpires_not?: Maybe<String>;
  lockedExpires_in?: Maybe<String[] | String>;
  lockedExpires_not_in?: Maybe<String[] | String>;
  lockedExpires_lt?: Maybe<String>;
  lockedExpires_lte?: Maybe<String>;
  lockedExpires_gt?: Maybe<String>;
  lockedExpires_gte?: Maybe<String>;
  lockedExpires_contains?: Maybe<String>;
  lockedExpires_not_contains?: Maybe<String>;
  lockedExpires_starts_with?: Maybe<String>;
  lockedExpires_not_starts_with?: Maybe<String>;
  lockedExpires_ends_with?: Maybe<String>;
  lockedExpires_not_ends_with?: Maybe<String>;
  resetPasswordCode?: Maybe<Int>;
  resetPasswordCode_not?: Maybe<Int>;
  resetPasswordCode_in?: Maybe<Int[] | Int>;
  resetPasswordCode_not_in?: Maybe<Int[] | Int>;
  resetPasswordCode_lt?: Maybe<Int>;
  resetPasswordCode_lte?: Maybe<Int>;
  resetPasswordCode_gt?: Maybe<Int>;
  resetPasswordCode_gte?: Maybe<Int>;
  resetPasswordExpires?: Maybe<String>;
  resetPasswordExpires_not?: Maybe<String>;
  resetPasswordExpires_in?: Maybe<String[] | String>;
  resetPasswordExpires_not_in?: Maybe<String[] | String>;
  resetPasswordExpires_lt?: Maybe<String>;
  resetPasswordExpires_lte?: Maybe<String>;
  resetPasswordExpires_gt?: Maybe<String>;
  resetPasswordExpires_gte?: Maybe<String>;
  resetPasswordExpires_contains?: Maybe<String>;
  resetPasswordExpires_not_contains?: Maybe<String>;
  resetPasswordExpires_starts_with?: Maybe<String>;
  resetPasswordExpires_not_starts_with?: Maybe<String>;
  resetPasswordExpires_ends_with?: Maybe<String>;
  resetPasswordExpires_not_ends_with?: Maybe<String>;
  securityQuestions_every?: Maybe<SecurityQuestionAnswerWhereInput>;
  securityQuestions_some?: Maybe<SecurityQuestionAnswerWhereInput>;
  securityQuestions_none?: Maybe<SecurityQuestionAnswerWhereInput>;
  loginAttempts?: Maybe<Int>;
  loginAttempts_not?: Maybe<Int>;
  loginAttempts_in?: Maybe<Int[] | Int>;
  loginAttempts_not_in?: Maybe<Int[] | Int>;
  loginAttempts_lt?: Maybe<Int>;
  loginAttempts_lte?: Maybe<Int>;
  loginAttempts_gt?: Maybe<Int>;
  loginAttempts_gte?: Maybe<Int>;
  securityQuestionAttempts?: Maybe<Int>;
  securityQuestionAttempts_not?: Maybe<Int>;
  securityQuestionAttempts_in?: Maybe<Int[] | Int>;
  securityQuestionAttempts_not_in?: Maybe<Int[] | Int>;
  securityQuestionAttempts_lt?: Maybe<Int>;
  securityQuestionAttempts_lte?: Maybe<Int>;
  securityQuestionAttempts_gt?: Maybe<Int>;
  securityQuestionAttempts_gte?: Maybe<Int>;
  lastVisit?: Maybe<DateTimeInput>;
  lastVisit_not?: Maybe<DateTimeInput>;
  lastVisit_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  lastVisit_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  lastVisit_lt?: Maybe<DateTimeInput>;
  lastVisit_lte?: Maybe<DateTimeInput>;
  lastVisit_gt?: Maybe<DateTimeInput>;
  lastVisit_gte?: Maybe<DateTimeInput>;
  ip?: Maybe<String>;
  ip_not?: Maybe<String>;
  ip_in?: Maybe<String[] | String>;
  ip_not_in?: Maybe<String[] | String>;
  ip_lt?: Maybe<String>;
  ip_lte?: Maybe<String>;
  ip_gt?: Maybe<String>;
  ip_gte?: Maybe<String>;
  ip_contains?: Maybe<String>;
  ip_not_contains?: Maybe<String>;
  ip_starts_with?: Maybe<String>;
  ip_not_starts_with?: Maybe<String>;
  ip_ends_with?: Maybe<String>;
  ip_not_ends_with?: Maybe<String>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  deletedAt?: Maybe<DateTimeInput>;
  deletedAt_not?: Maybe<DateTimeInput>;
  deletedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  deletedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  deletedAt_lt?: Maybe<DateTimeInput>;
  deletedAt_lte?: Maybe<DateTimeInput>;
  deletedAt_gt?: Maybe<DateTimeInput>;
  deletedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UserAccountWhereInput[] | UserAccountWhereInput>;
  OR?: Maybe<UserAccountWhereInput[] | UserAccountWhereInput>;
  NOT?: Maybe<UserAccountWhereInput[] | UserAccountWhereInput>;
}

export interface UserAccountSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserAccountWhereInput>;
  AND?: Maybe<
    UserAccountSubscriptionWhereInput[] | UserAccountSubscriptionWhereInput
  >;
  OR?: Maybe<
    UserAccountSubscriptionWhereInput[] | UserAccountSubscriptionWhereInput
  >;
  NOT?: Maybe<
    UserAccountSubscriptionWhereInput[] | UserAccountSubscriptionWhereInput
  >;
}

export interface RoleWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<RoleName>;
  name_not?: Maybe<RoleName>;
  name_in?: Maybe<RoleName[] | RoleName>;
  name_not_in?: Maybe<RoleName[] | RoleName>;
  AND?: Maybe<RoleWhereInput[] | RoleWhereInput>;
  OR?: Maybe<RoleWhereInput[] | RoleWhereInput>;
  NOT?: Maybe<RoleWhereInput[] | RoleWhereInput>;
}

export interface RoleSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<RoleWhereInput>;
  AND?: Maybe<RoleSubscriptionWhereInput[] | RoleSubscriptionWhereInput>;
  OR?: Maybe<RoleSubscriptionWhereInput[] | RoleSubscriptionWhereInput>;
  NOT?: Maybe<RoleSubscriptionWhereInput[] | RoleSubscriptionWhereInput>;
}

export interface UserCreateWithoutUserAccountInput {
  role: RoleCreateOneInput;
  customerAccount?: Maybe<CustomerCreateOneWithoutUserInput>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  email: String;
  password: String;
  phoneCountryCode?: Maybe<String>;
  phone?: Maybe<String>;
  country?: Maybe<String>;
  address1?: Maybe<String>;
  address2?: Maybe<String>;
  city?: Maybe<String>;
  state?: Maybe<String>;
  postalCode?: Maybe<String>;
  deletedAt?: Maybe<DateTimeInput>;
}

export interface UserAccountUpdateInput {
  user?: Maybe<UserUpdateOneRequiredWithoutUserAccountInput>;
  confirmed?: Maybe<Boolean>;
  confirmedCode?: Maybe<Int>;
  confirmedExpires?: Maybe<String>;
  locked?: Maybe<Boolean>;
  lockedCode?: Maybe<Int>;
  lockedExpires?: Maybe<String>;
  resetPasswordCode?: Maybe<Int>;
  resetPasswordExpires?: Maybe<String>;
  securityQuestions?: Maybe<
    SecurityQuestionAnswerUpdateManyWithoutUserAccountInput
  >;
  loginAttempts?: Maybe<Int>;
  securityQuestionAttempts?: Maybe<Int>;
  lastVisit?: Maybe<DateTimeInput>;
  ip?: Maybe<String>;
  deletedAt?: Maybe<DateTimeInput>;
}

export interface UserCreateOneWithoutUserAccountInput {
  create?: Maybe<UserCreateWithoutUserAccountInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateInput {
  role?: Maybe<RoleUpdateOneRequiredInput>;
  userAccount?: Maybe<UserAccountUpdateOneRequiredWithoutUserInput>;
  customerAccount?: Maybe<CustomerUpdateOneWithoutUserInput>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  phoneCountryCode?: Maybe<String>;
  phone?: Maybe<String>;
  country?: Maybe<String>;
  address1?: Maybe<String>;
  address2?: Maybe<String>;
  city?: Maybe<String>;
  state?: Maybe<String>;
  postalCode?: Maybe<String>;
  deletedAt?: Maybe<DateTimeInput>;
}

export interface UserAccountCreateWithoutSecurityQuestionsInput {
  user: UserCreateOneWithoutUserAccountInput;
  confirmed?: Maybe<Boolean>;
  confirmedCode?: Maybe<Int>;
  confirmedExpires?: Maybe<String>;
  locked?: Maybe<Boolean>;
  lockedCode?: Maybe<Int>;
  lockedExpires?: Maybe<String>;
  resetPasswordCode?: Maybe<Int>;
  resetPasswordExpires?: Maybe<String>;
  loginAttempts?: Maybe<Int>;
  securityQuestionAttempts?: Maybe<Int>;
  lastVisit?: Maybe<DateTimeInput>;
  ip?: Maybe<String>;
  deletedAt?: Maybe<DateTimeInput>;
}

export interface UserAccountUpsertWithoutSecurityQuestionsInput {
  update: UserAccountUpdateWithoutSecurityQuestionsDataInput;
  create: UserAccountCreateWithoutSecurityQuestionsInput;
}

export interface SecurityQuestionAnswerUpsertWithWhereUniqueWithoutUserAccountInput {
  where: SecurityQuestionAnswerWhereUniqueInput;
  update: SecurityQuestionAnswerUpdateWithoutUserAccountDataInput;
  create: SecurityQuestionAnswerCreateWithoutUserAccountInput;
}

export interface CustomerUpdateWithoutUserDataInput {
  stripeId?: Maybe<String>;
  deletedAt?: Maybe<DateTimeInput>;
}

export interface SecurityQuestionAnswerScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  answer?: Maybe<String>;
  answer_not?: Maybe<String>;
  answer_in?: Maybe<String[] | String>;
  answer_not_in?: Maybe<String[] | String>;
  answer_lt?: Maybe<String>;
  answer_lte?: Maybe<String>;
  answer_gt?: Maybe<String>;
  answer_gte?: Maybe<String>;
  answer_contains?: Maybe<String>;
  answer_not_contains?: Maybe<String>;
  answer_starts_with?: Maybe<String>;
  answer_not_starts_with?: Maybe<String>;
  answer_ends_with?: Maybe<String>;
  answer_not_ends_with?: Maybe<String>;
  AND?: Maybe<
    | SecurityQuestionAnswerScalarWhereInput[]
    | SecurityQuestionAnswerScalarWhereInput
  >;
  OR?: Maybe<
    | SecurityQuestionAnswerScalarWhereInput[]
    | SecurityQuestionAnswerScalarWhereInput
  >;
  NOT?: Maybe<
    | SecurityQuestionAnswerScalarWhereInput[]
    | SecurityQuestionAnswerScalarWhereInput
  >;
}

export type UserAccountWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  confirmedCode?: Maybe<Int>;
  lockedCode?: Maybe<Int>;
  resetPasswordCode?: Maybe<Int>;
}>;

export interface SecurityQuestionAnswerUpdateManyWithWhereNestedInput {
  where: SecurityQuestionAnswerScalarWhereInput;
  data: SecurityQuestionAnswerUpdateManyDataInput;
}

export interface CustomerCreateWithoutUserInput {
  stripeId: String;
  deletedAt?: Maybe<DateTimeInput>;
}

export interface SecurityQuestionAnswerUpdateManyDataInput {
  answer?: Maybe<String>;
}

export interface UserCreateWithoutCustomerAccountInput {
  role: RoleCreateOneInput;
  userAccount: UserAccountCreateOneWithoutUserInput;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  email: String;
  password: String;
  phoneCountryCode?: Maybe<String>;
  phone?: Maybe<String>;
  country?: Maybe<String>;
  address1?: Maybe<String>;
  address2?: Maybe<String>;
  city?: Maybe<String>;
  state?: Maybe<String>;
  postalCode?: Maybe<String>;
  deletedAt?: Maybe<DateTimeInput>;
}

export interface UserAccountUpsertWithoutUserInput {
  update: UserAccountUpdateWithoutUserDataInput;
  create: UserAccountCreateWithoutUserInput;
}

export interface CustomerSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CustomerWhereInput>;
  AND?: Maybe<
    CustomerSubscriptionWhereInput[] | CustomerSubscriptionWhereInput
  >;
  OR?: Maybe<CustomerSubscriptionWhereInput[] | CustomerSubscriptionWhereInput>;
  NOT?: Maybe<
    CustomerSubscriptionWhereInput[] | CustomerSubscriptionWhereInput
  >;
}

export interface UserUpsertWithoutCustomerAccountInput {
  update: UserUpdateWithoutCustomerAccountDataInput;
  create: UserCreateWithoutCustomerAccountInput;
}

export interface SecurityQuestionAnswerUpdateManyMutationInput {
  answer?: Maybe<String>;
}

export interface CustomerUpdateManyMutationInput {
  stripeId?: Maybe<String>;
  deletedAt?: Maybe<DateTimeInput>;
}

export interface UserUpdateWithoutUserAccountDataInput {
  role?: Maybe<RoleUpdateOneRequiredInput>;
  customerAccount?: Maybe<CustomerUpdateOneWithoutUserInput>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  phoneCountryCode?: Maybe<String>;
  phone?: Maybe<String>;
  country?: Maybe<String>;
  address1?: Maybe<String>;
  address2?: Maybe<String>;
  city?: Maybe<String>;
  state?: Maybe<String>;
  postalCode?: Maybe<String>;
  deletedAt?: Maybe<DateTimeInput>;
}

export interface UserAccountCreateOneWithoutSecurityQuestionsInput {
  create?: Maybe<UserAccountCreateWithoutSecurityQuestionsInput>;
  connect?: Maybe<UserAccountWhereUniqueInput>;
}

export interface CustomerCreateInput {
  user: UserCreateOneWithoutCustomerAccountInput;
  stripeId: String;
  deletedAt?: Maybe<DateTimeInput>;
}

export interface SecurityQuestionUpdateInput {
  shortName?: Maybe<String>;
  question?: Maybe<String>;
}

export interface RoleUpdateManyMutationInput {
  name?: Maybe<RoleName>;
}

export interface RoleUpdateInput {
  name?: Maybe<RoleName>;
}

export interface SecurityQuestionAnswerCreateInput {
  userAccount: UserAccountCreateOneWithoutSecurityQuestionsInput;
  userSecurityQuestion: SecurityQuestionCreateOneInput;
  answer: String;
}

export interface SecurityQuestionAnswerSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<SecurityQuestionAnswerWhereInput>;
  AND?: Maybe<
    | SecurityQuestionAnswerSubscriptionWhereInput[]
    | SecurityQuestionAnswerSubscriptionWhereInput
  >;
  OR?: Maybe<
    | SecurityQuestionAnswerSubscriptionWhereInput[]
    | SecurityQuestionAnswerSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | SecurityQuestionAnswerSubscriptionWhereInput[]
    | SecurityQuestionAnswerSubscriptionWhereInput
  >;
}

export interface UserAccountUpdateOneRequiredWithoutSecurityQuestionsInput {
  create?: Maybe<UserAccountCreateWithoutSecurityQuestionsInput>;
  update?: Maybe<UserAccountUpdateWithoutSecurityQuestionsDataInput>;
  upsert?: Maybe<UserAccountUpsertWithoutSecurityQuestionsInput>;
  connect?: Maybe<UserAccountWhereUniqueInput>;
}

export interface CustomerUpsertWithoutUserInput {
  update: CustomerUpdateWithoutUserDataInput;
  create: CustomerCreateWithoutUserInput;
}

export type SecurityQuestionWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  shortName?: Maybe<String>;
}>;

export interface NodeNode {
  id: ID_Output;
}

export interface UserAccountPreviousValues {
  id: ID_Output;
  confirmed: Boolean;
  confirmedCode?: Int;
  confirmedExpires?: String;
  locked: Boolean;
  lockedCode?: Int;
  lockedExpires?: String;
  resetPasswordCode?: Int;
  resetPasswordExpires?: String;
  loginAttempts: Int;
  securityQuestionAttempts: Int;
  lastVisit?: DateTimeOutput;
  ip?: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
  deletedAt?: DateTimeOutput;
}

export interface UserAccountPreviousValuesPromise
  extends Promise<UserAccountPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  confirmed: () => Promise<Boolean>;
  confirmedCode: () => Promise<Int>;
  confirmedExpires: () => Promise<String>;
  locked: () => Promise<Boolean>;
  lockedCode: () => Promise<Int>;
  lockedExpires: () => Promise<String>;
  resetPasswordCode: () => Promise<Int>;
  resetPasswordExpires: () => Promise<String>;
  loginAttempts: () => Promise<Int>;
  securityQuestionAttempts: () => Promise<Int>;
  lastVisit: () => Promise<DateTimeOutput>;
  ip: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  deletedAt: () => Promise<DateTimeOutput>;
}

export interface UserAccountPreviousValuesSubscription
  extends Promise<AsyncIterator<UserAccountPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  confirmed: () => Promise<AsyncIterator<Boolean>>;
  confirmedCode: () => Promise<AsyncIterator<Int>>;
  confirmedExpires: () => Promise<AsyncIterator<String>>;
  locked: () => Promise<AsyncIterator<Boolean>>;
  lockedCode: () => Promise<AsyncIterator<Int>>;
  lockedExpires: () => Promise<AsyncIterator<String>>;
  resetPasswordCode: () => Promise<AsyncIterator<Int>>;
  resetPasswordExpires: () => Promise<AsyncIterator<String>>;
  loginAttempts: () => Promise<AsyncIterator<Int>>;
  securityQuestionAttempts: () => Promise<AsyncIterator<Int>>;
  lastVisit: () => Promise<AsyncIterator<DateTimeOutput>>;
  ip: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  deletedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AggregateRole {
  count: Int;
}

export interface AggregateRolePromise
  extends Promise<AggregateRole>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateRoleSubscription
  extends Promise<AsyncIterator<AggregateRole>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SecurityQuestionAnswer {
  id: ID_Output;
  answer: String;
}

export interface SecurityQuestionAnswerPromise
  extends Promise<SecurityQuestionAnswer>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  userAccount: <T = UserAccountPromise>() => T;
  userSecurityQuestion: <T = SecurityQuestionPromise>() => T;
  answer: () => Promise<String>;
}

export interface SecurityQuestionAnswerSubscription
  extends Promise<AsyncIterator<SecurityQuestionAnswer>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  userAccount: <T = UserAccountSubscription>() => T;
  userSecurityQuestion: <T = SecurityQuestionSubscription>() => T;
  answer: () => Promise<AsyncIterator<String>>;
}

export interface SecurityQuestionAnswerNullablePromise
  extends Promise<SecurityQuestionAnswer | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  userAccount: <T = UserAccountPromise>() => T;
  userSecurityQuestion: <T = SecurityQuestionPromise>() => T;
  answer: () => Promise<String>;
}

export interface RoleEdge {
  node: Role;
  cursor: String;
}

export interface RoleEdgePromise extends Promise<RoleEdge>, Fragmentable {
  node: <T = RolePromise>() => T;
  cursor: () => Promise<String>;
}

export interface RoleEdgeSubscription
  extends Promise<AsyncIterator<RoleEdge>>,
    Fragmentable {
  node: <T = RoleSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface SecurityQuestion {
  id: ID_Output;
  shortName: String;
  question: String;
}

export interface SecurityQuestionPromise
  extends Promise<SecurityQuestion>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  shortName: () => Promise<String>;
  question: () => Promise<String>;
}

export interface SecurityQuestionSubscription
  extends Promise<AsyncIterator<SecurityQuestion>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  shortName: () => Promise<AsyncIterator<String>>;
  question: () => Promise<AsyncIterator<String>>;
}

export interface SecurityQuestionNullablePromise
  extends Promise<SecurityQuestion | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  shortName: () => Promise<String>;
  question: () => Promise<String>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface CustomerConnection {
  pageInfo: PageInfo;
  edges: CustomerEdge[];
}

export interface CustomerConnectionPromise
  extends Promise<CustomerConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CustomerEdge>>() => T;
  aggregate: <T = AggregateCustomerPromise>() => T;
}

export interface CustomerConnectionSubscription
  extends Promise<AsyncIterator<CustomerConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CustomerEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCustomerSubscription>() => T;
}

export interface UserAccountSubscriptionPayload {
  mutation: MutationType;
  node: UserAccount;
  updatedFields: String[];
  previousValues: UserAccountPreviousValues;
}

export interface UserAccountSubscriptionPayloadPromise
  extends Promise<UserAccountSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserAccountPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserAccountPreviousValuesPromise>() => T;
}

export interface UserAccountSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserAccountSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserAccountSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserAccountPreviousValuesSubscription>() => T;
}

export interface RoleConnection {
  pageInfo: PageInfo;
  edges: RoleEdge[];
}

export interface RoleConnectionPromise
  extends Promise<RoleConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<RoleEdge>>() => T;
  aggregate: <T = AggregateRolePromise>() => T;
}

export interface RoleConnectionSubscription
  extends Promise<AsyncIterator<RoleConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<RoleEdgeSubscription>>>() => T;
  aggregate: <T = AggregateRoleSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  firstName?: String;
  lastName?: String;
  email: String;
  password: String;
  phoneCountryCode?: String;
  phone?: String;
  country?: String;
  address1?: String;
  address2?: String;
  city?: String;
  state?: String;
  postalCode?: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
  deletedAt?: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  phoneCountryCode: () => Promise<String>;
  phone: () => Promise<String>;
  country: () => Promise<String>;
  address1: () => Promise<String>;
  address2: () => Promise<String>;
  city: () => Promise<String>;
  state: () => Promise<String>;
  postalCode: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  deletedAt: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  phoneCountryCode: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  country: () => Promise<AsyncIterator<String>>;
  address1: () => Promise<AsyncIterator<String>>;
  address2: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  state: () => Promise<AsyncIterator<String>>;
  postalCode: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  deletedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserAccountEdge {
  node: UserAccount;
  cursor: String;
}

export interface UserAccountEdgePromise
  extends Promise<UserAccountEdge>,
    Fragmentable {
  node: <T = UserAccountPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserAccountEdgeSubscription
  extends Promise<AsyncIterator<UserAccountEdge>>,
    Fragmentable {
  node: <T = UserAccountSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserAccount {
  id: ID_Output;
  confirmed: Boolean;
  confirmedCode?: Int;
  confirmedExpires?: String;
  locked: Boolean;
  lockedCode?: Int;
  lockedExpires?: String;
  resetPasswordCode?: Int;
  resetPasswordExpires?: String;
  loginAttempts: Int;
  securityQuestionAttempts: Int;
  lastVisit?: DateTimeOutput;
  ip?: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
  deletedAt?: DateTimeOutput;
}

export interface UserAccountPromise extends Promise<UserAccount>, Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  confirmed: () => Promise<Boolean>;
  confirmedCode: () => Promise<Int>;
  confirmedExpires: () => Promise<String>;
  locked: () => Promise<Boolean>;
  lockedCode: () => Promise<Int>;
  lockedExpires: () => Promise<String>;
  resetPasswordCode: () => Promise<Int>;
  resetPasswordExpires: () => Promise<String>;
  securityQuestions: <T = FragmentableArray<SecurityQuestionAnswer>>(args?: {
    where?: SecurityQuestionAnswerWhereInput;
    orderBy?: SecurityQuestionAnswerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  loginAttempts: () => Promise<Int>;
  securityQuestionAttempts: () => Promise<Int>;
  lastVisit: () => Promise<DateTimeOutput>;
  ip: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  deletedAt: () => Promise<DateTimeOutput>;
}

export interface UserAccountSubscription
  extends Promise<AsyncIterator<UserAccount>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  confirmed: () => Promise<AsyncIterator<Boolean>>;
  confirmedCode: () => Promise<AsyncIterator<Int>>;
  confirmedExpires: () => Promise<AsyncIterator<String>>;
  locked: () => Promise<AsyncIterator<Boolean>>;
  lockedCode: () => Promise<AsyncIterator<Int>>;
  lockedExpires: () => Promise<AsyncIterator<String>>;
  resetPasswordCode: () => Promise<AsyncIterator<Int>>;
  resetPasswordExpires: () => Promise<AsyncIterator<String>>;
  securityQuestions: <
    T = Promise<AsyncIterator<SecurityQuestionAnswerSubscription>>
  >(args?: {
    where?: SecurityQuestionAnswerWhereInput;
    orderBy?: SecurityQuestionAnswerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  loginAttempts: () => Promise<AsyncIterator<Int>>;
  securityQuestionAttempts: () => Promise<AsyncIterator<Int>>;
  lastVisit: () => Promise<AsyncIterator<DateTimeOutput>>;
  ip: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  deletedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserAccountNullablePromise
  extends Promise<UserAccount | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  confirmed: () => Promise<Boolean>;
  confirmedCode: () => Promise<Int>;
  confirmedExpires: () => Promise<String>;
  locked: () => Promise<Boolean>;
  lockedCode: () => Promise<Int>;
  lockedExpires: () => Promise<String>;
  resetPasswordCode: () => Promise<Int>;
  resetPasswordExpires: () => Promise<String>;
  securityQuestions: <T = FragmentableArray<SecurityQuestionAnswer>>(args?: {
    where?: SecurityQuestionAnswerWhereInput;
    orderBy?: SecurityQuestionAnswerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  loginAttempts: () => Promise<Int>;
  securityQuestionAttempts: () => Promise<Int>;
  lastVisit: () => Promise<DateTimeOutput>;
  ip: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  deletedAt: () => Promise<DateTimeOutput>;
}

export interface Customer {
  id: ID_Output;
  stripeId: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
  deletedAt?: DateTimeOutput;
}

export interface CustomerPromise extends Promise<Customer>, Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  stripeId: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  deletedAt: () => Promise<DateTimeOutput>;
}

export interface CustomerSubscription
  extends Promise<AsyncIterator<Customer>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  stripeId: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  deletedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CustomerNullablePromise
  extends Promise<Customer | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  stripeId: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  deletedAt: () => Promise<DateTimeOutput>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CustomerSubscriptionPayload {
  mutation: MutationType;
  node: Customer;
  updatedFields: String[];
  previousValues: CustomerPreviousValues;
}

export interface CustomerSubscriptionPayloadPromise
  extends Promise<CustomerSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CustomerPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CustomerPreviousValuesPromise>() => T;
}

export interface CustomerSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CustomerSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CustomerSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CustomerPreviousValuesSubscription>() => T;
}

export interface User {
  id: ID_Output;
  firstName?: String;
  lastName?: String;
  email: String;
  password: String;
  phoneCountryCode?: String;
  phone?: String;
  country?: String;
  address1?: String;
  address2?: String;
  city?: String;
  state?: String;
  postalCode?: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
  deletedAt?: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  role: <T = RolePromise>() => T;
  userAccount: <T = UserAccountPromise>() => T;
  customerAccount: <T = CustomerPromise>() => T;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  phoneCountryCode: () => Promise<String>;
  phone: () => Promise<String>;
  country: () => Promise<String>;
  address1: () => Promise<String>;
  address2: () => Promise<String>;
  city: () => Promise<String>;
  state: () => Promise<String>;
  postalCode: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  deletedAt: () => Promise<DateTimeOutput>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  role: <T = RoleSubscription>() => T;
  userAccount: <T = UserAccountSubscription>() => T;
  customerAccount: <T = CustomerSubscription>() => T;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  phoneCountryCode: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  country: () => Promise<AsyncIterator<String>>;
  address1: () => Promise<AsyncIterator<String>>;
  address2: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  state: () => Promise<AsyncIterator<String>>;
  postalCode: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  deletedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  role: <T = RolePromise>() => T;
  userAccount: <T = UserAccountPromise>() => T;
  customerAccount: <T = CustomerPromise>() => T;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  phoneCountryCode: () => Promise<String>;
  phone: () => Promise<String>;
  country: () => Promise<String>;
  address1: () => Promise<String>;
  address2: () => Promise<String>;
  city: () => Promise<String>;
  state: () => Promise<String>;
  postalCode: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  deletedAt: () => Promise<DateTimeOutput>;
}

export interface CustomerPreviousValues {
  id: ID_Output;
  stripeId: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
  deletedAt?: DateTimeOutput;
}

export interface CustomerPreviousValuesPromise
  extends Promise<CustomerPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  stripeId: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  deletedAt: () => Promise<DateTimeOutput>;
}

export interface CustomerPreviousValuesSubscription
  extends Promise<AsyncIterator<CustomerPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  stripeId: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  deletedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface SecurityQuestionAnswerEdge {
  node: SecurityQuestionAnswer;
  cursor: String;
}

export interface SecurityQuestionAnswerEdgePromise
  extends Promise<SecurityQuestionAnswerEdge>,
    Fragmentable {
  node: <T = SecurityQuestionAnswerPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SecurityQuestionAnswerEdgeSubscription
  extends Promise<AsyncIterator<SecurityQuestionAnswerEdge>>,
    Fragmentable {
  node: <T = SecurityQuestionAnswerSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCustomer {
  count: Int;
}

export interface AggregateCustomerPromise
  extends Promise<AggregateCustomer>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCustomerSubscription
  extends Promise<AsyncIterator<AggregateCustomer>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateSecurityQuestion {
  count: Int;
}

export interface AggregateSecurityQuestionPromise
  extends Promise<AggregateSecurityQuestion>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSecurityQuestionSubscription
  extends Promise<AsyncIterator<AggregateSecurityQuestion>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface RoleSubscriptionPayload {
  mutation: MutationType;
  node: Role;
  updatedFields: String[];
  previousValues: RolePreviousValues;
}

export interface RoleSubscriptionPayloadPromise
  extends Promise<RoleSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = RolePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = RolePreviousValuesPromise>() => T;
}

export interface RoleSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<RoleSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = RoleSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = RolePreviousValuesSubscription>() => T;
}

export interface SecurityQuestionConnection {
  pageInfo: PageInfo;
  edges: SecurityQuestionEdge[];
}

export interface SecurityQuestionConnectionPromise
  extends Promise<SecurityQuestionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SecurityQuestionEdge>>() => T;
  aggregate: <T = AggregateSecurityQuestionPromise>() => T;
}

export interface SecurityQuestionConnectionSubscription
  extends Promise<AsyncIterator<SecurityQuestionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SecurityQuestionEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSecurityQuestionSubscription>() => T;
}

export interface RolePreviousValues {
  id: ID_Output;
  name: RoleName;
}

export interface RolePreviousValuesPromise
  extends Promise<RolePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<RoleName>;
}

export interface RolePreviousValuesSubscription
  extends Promise<AsyncIterator<RolePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<RoleName>>;
}

export interface AggregateUserAccount {
  count: Int;
}

export interface AggregateUserAccountPromise
  extends Promise<AggregateUserAccount>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserAccountSubscription
  extends Promise<AsyncIterator<AggregateUserAccount>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CustomerEdge {
  node: Customer;
  cursor: String;
}

export interface CustomerEdgePromise
  extends Promise<CustomerEdge>,
    Fragmentable {
  node: <T = CustomerPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CustomerEdgeSubscription
  extends Promise<AsyncIterator<CustomerEdge>>,
    Fragmentable {
  node: <T = CustomerSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SecurityQuestionSubscriptionPayload {
  mutation: MutationType;
  node: SecurityQuestion;
  updatedFields: String[];
  previousValues: SecurityQuestionPreviousValues;
}

export interface SecurityQuestionSubscriptionPayloadPromise
  extends Promise<SecurityQuestionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SecurityQuestionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SecurityQuestionPreviousValuesPromise>() => T;
}

export interface SecurityQuestionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SecurityQuestionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SecurityQuestionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SecurityQuestionPreviousValuesSubscription>() => T;
}

export interface AggregateSecurityQuestionAnswer {
  count: Int;
}

export interface AggregateSecurityQuestionAnswerPromise
  extends Promise<AggregateSecurityQuestionAnswer>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSecurityQuestionAnswerSubscription
  extends Promise<AsyncIterator<AggregateSecurityQuestionAnswer>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SecurityQuestionEdge {
  node: SecurityQuestion;
  cursor: String;
}

export interface SecurityQuestionEdgePromise
  extends Promise<SecurityQuestionEdge>,
    Fragmentable {
  node: <T = SecurityQuestionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SecurityQuestionEdgeSubscription
  extends Promise<AsyncIterator<SecurityQuestionEdge>>,
    Fragmentable {
  node: <T = SecurityQuestionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface SecurityQuestionAnswerPreviousValues {
  id: ID_Output;
  answer: String;
}

export interface SecurityQuestionAnswerPreviousValuesPromise
  extends Promise<SecurityQuestionAnswerPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  answer: () => Promise<String>;
}

export interface SecurityQuestionAnswerPreviousValuesSubscription
  extends Promise<AsyncIterator<SecurityQuestionAnswerPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  answer: () => Promise<AsyncIterator<String>>;
}

export interface SecurityQuestionAnswerSubscriptionPayload {
  mutation: MutationType;
  node: SecurityQuestionAnswer;
  updatedFields: String[];
  previousValues: SecurityQuestionAnswerPreviousValues;
}

export interface SecurityQuestionAnswerSubscriptionPayloadPromise
  extends Promise<SecurityQuestionAnswerSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SecurityQuestionAnswerPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SecurityQuestionAnswerPreviousValuesPromise>() => T;
}

export interface SecurityQuestionAnswerSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SecurityQuestionAnswerSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SecurityQuestionAnswerSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SecurityQuestionAnswerPreviousValuesSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface SecurityQuestionPreviousValues {
  id: ID_Output;
  shortName: String;
  question: String;
}

export interface SecurityQuestionPreviousValuesPromise
  extends Promise<SecurityQuestionPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  shortName: () => Promise<String>;
  question: () => Promise<String>;
}

export interface SecurityQuestionPreviousValuesSubscription
  extends Promise<AsyncIterator<SecurityQuestionPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  shortName: () => Promise<AsyncIterator<String>>;
  question: () => Promise<AsyncIterator<String>>;
}

export interface Role {
  id: ID_Output;
  name: RoleName;
}

export interface RolePromise extends Promise<Role>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<RoleName>;
}

export interface RoleSubscription
  extends Promise<AsyncIterator<Role>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<RoleName>>;
}

export interface RoleNullablePromise
  extends Promise<Role | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<RoleName>;
}

export interface SecurityQuestionAnswerConnection {
  pageInfo: PageInfo;
  edges: SecurityQuestionAnswerEdge[];
}

export interface SecurityQuestionAnswerConnectionPromise
  extends Promise<SecurityQuestionAnswerConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SecurityQuestionAnswerEdge>>() => T;
  aggregate: <T = AggregateSecurityQuestionAnswerPromise>() => T;
}

export interface SecurityQuestionAnswerConnectionSubscription
  extends Promise<AsyncIterator<SecurityQuestionAnswerConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<SecurityQuestionAnswerEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateSecurityQuestionAnswerSubscription>() => T;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserAccountConnection {
  pageInfo: PageInfo;
  edges: UserAccountEdge[];
}

export interface UserAccountConnectionPromise
  extends Promise<UserAccountConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserAccountEdge>>() => T;
  aggregate: <T = AggregateUserAccountPromise>() => T;
}

export interface UserAccountConnectionSubscription
  extends Promise<AsyncIterator<UserAccountConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserAccountEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserAccountSubscription>() => T;
}

export type Long = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Role",
    embedded: false
  },
  {
    name: "RoleName",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "UserAccount",
    embedded: false
  },
  {
    name: "SecurityQuestion",
    embedded: false
  },
  {
    name: "SecurityQuestionAnswer",
    embedded: false
  },
  {
    name: "Customer",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://localhost:4466`
});
export const prisma = new Prisma();
